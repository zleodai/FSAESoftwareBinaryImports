'\" t
.\"     Title: CREATE SUBSCRIPTION
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 2024
.\"    Manual: PostgreSQL 17.0 Documentation
.\"    Source: PostgreSQL 17.0
.\"  Language: English
.\"
.TH "CREATE SUBSCRIPTION" "7" "2024" "PostgreSQL 17.0" "PostgreSQL 17.0 Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
CREATE_SUBSCRIPTION \- define a new subscription
.SH "SYNOPSIS"
.sp
.nf
CREATE SUBSCRIPTION \fIsubscription_name\fR
    CONNECTION \*(Aq\fIconninfo\fR\*(Aq
    PUBLICATION \fIpublication_name\fR [, \&.\&.\&.]
    [ WITH ( \fIsubscription_parameter\fR [= \fIvalue\fR] [, \&.\&.\&. ] ) ]
.fi
.SH "DESCRIPTION"
.PP
\fBCREATE SUBSCRIPTION\fR
adds a new logical\-replication subscription\&. The user that creates a subscription becomes the owner of the subscription\&. The subscription name must be distinct from the name of any existing subscription in the current database\&.
.PP
A subscription represents a replication connection to the publisher\&. Hence, in addition to adding definitions in the local catalogs, this command normally creates a replication slot on the publisher\&.
.PP
A logical replication worker will be started to replicate data for the new subscription at the commit of the transaction where this command is run, unless the subscription is initially disabled\&.
.PP
To be able to create a subscription, you must have the privileges of the
pg_create_subscription
role, as well as
CREATE
privileges on the current database\&.
.PP
Additional information about subscriptions and logical replication as a whole is available at
Section\ \&29.2
and
Chapter\ \&29\&.
.SH "PARAMETERS"
.PP
\fIsubscription_name\fR
.RS 4
The name of the new subscription\&.
.RE
.PP
CONNECTION \*(Aq\fIconninfo\fR\*(Aq
.RS 4
The
libpq
connection string defining how to connect to the publisher database\&. For details see
Section\ \&32.1.1\&.
.RE
.PP
PUBLICATION \fIpublication_name\fR [, \&.\&.\&.]
.RS 4
Names of the publications on the publisher to subscribe to\&.
.RE
.PP
WITH ( \fIsubscription_parameter\fR [= \fIvalue\fR] [, \&.\&.\&. ] )
.RS 4
This clause specifies optional parameters for a subscription\&.
.sp
The following parameters control what happens during subscription creation:
.PP
connect (boolean)
.RS 4
Specifies whether the
\fBCREATE SUBSCRIPTION\fR
command should connect to the publisher at all\&. The default is
true\&. Setting this to
false
will force the values of
create_slot,
enabled
and
copy_data
to
false\&. (You cannot combine setting
connect
to
false
with setting
create_slot,
enabled, or
copy_data
to
true\&.)
.sp
Since no connection is made when this option is
false, no tables are subscribed\&. To initiate replication, you must manually create the replication slot, enable the failover if required, enable the subscription, and refresh the subscription\&. See
Section\ \&29.2.3
for examples\&.
.RE
.PP
create_slot (boolean)
.RS 4
Specifies whether the command should create the replication slot on the publisher\&. The default is
true\&.
.sp
If set to
false, you are responsible for creating the publisher\*(Aqs slot in some other way\&. See
Section\ \&29.2.3
for examples\&.
.RE
.PP
enabled (boolean)
.RS 4
Specifies whether the subscription should be actively replicating or whether it should just be set up but not started yet\&. The default is
true\&.
.RE
.PP
slot_name (string)
.RS 4
Name of the publisher\*(Aqs replication slot to use\&. The default is to use the name of the subscription for the slot name\&.
.sp
Setting
slot_name
to
NONE
means there will be no replication slot associated with the subscription\&. Such subscriptions must also have both
enabled
and
create_slot
set to
false\&. Use this when you will be creating the replication slot later manually\&. See
Section\ \&29.2.3
for examples\&.
.sp
When setting
slot_name
to a valid name and
create_slot
to false, the
failover
property value of the named slot may differ from the counterpart
failover
parameter specified in the subscription\&. Always ensure the slot property
failover
matches the counterpart parameter of the subscription and vice versa\&. Otherwise, the slot on the publisher may behave differently from what these subscription options say: for example, the slot on the publisher could either be synced to the standbys even when the subscription\*(Aqs
failover
option is disabled or could be disabled for sync even when the subscription\*(Aqs
failover
option is enabled\&.
.RE
.sp
The following parameters control the subscription\*(Aqs replication behavior after it has been created:
.PP
binary (boolean)
.RS 4
Specifies whether the subscription will request the publisher to send the data in binary format (as opposed to text)\&. The default is
false\&. Any initial table synchronization copy (see
copy_data) also uses the same format\&. Binary format can be faster than the text format, but it is less portable across machine architectures and
PostgreSQL
versions\&. Binary format is very data type specific; for example, it will not allow copying from a
smallint
column to an
integer
column, even though that would work fine in text format\&. Even when this option is enabled, only data types having binary send and receive functions will be transferred in binary\&. Note that the initial synchronization requires all data types to have binary send and receive functions, otherwise the synchronization will fail (see
CREATE TYPE (\fBCREATE_TYPE\fR(7))
for more about send/receive functions)\&.
.sp
When doing cross\-version replication, it could be that the publisher has a binary send function for some data type, but the subscriber lacks a binary receive function for that type\&. In such a case, data transfer will fail, and the
binary
option cannot be used\&.
.sp
If the publisher is a
PostgreSQL
version before 16, then any initial table synchronization will use text format even if
binary = true\&.
.RE
.PP
copy_data (boolean)
.RS 4
Specifies whether to copy pre\-existing data in the publications that are being subscribed to when the replication starts\&. The default is
true\&.
.sp
If the publications contain
WHERE
clauses, it will affect what data is copied\&. Refer to the
Notes
for details\&.
.sp
See
Notes
for details of how
copy_data = true
can interact with the
origin
parameter\&.
.RE
.PP
streaming (enum)
.RS 4
Specifies whether to enable streaming of in\-progress transactions for this subscription\&. The default value is
off, meaning all transactions are fully decoded on the publisher and only then sent to the subscriber as a whole\&.
.sp
If set to
on, the incoming changes are written to temporary files and then applied only after the transaction is committed on the publisher and received by the subscriber\&.
.sp
If set to
parallel, incoming changes are directly applied via one of the parallel apply workers, if available\&. If no parallel apply worker is free to handle streaming transactions then the changes are written to temporary files and applied after the transaction is committed\&. Note that if an error happens in a parallel apply worker, the finish LSN of the remote transaction might not be reported in the server log\&.
.RE
.PP
synchronous_commit (enum)
.RS 4
The value of this parameter overrides the
synchronous_commit
setting within this subscription\*(Aqs apply worker processes\&. The default value is
off\&.
.sp
It is safe to use
off
for logical replication: If the subscriber loses transactions because of missing synchronization, the data will be sent again from the publisher\&.
.sp
A different setting might be appropriate when doing synchronous logical replication\&. The logical replication workers report the positions of writes and flushes to the publisher, and when using synchronous replication, the publisher will wait for the actual flush\&. This means that setting
synchronous_commit
for the subscriber to
off
when the subscription is used for synchronous replication might increase the latency for
\fBCOMMIT\fR
on the publisher\&. In this scenario, it can be advantageous to set
synchronous_commit
to
local
or higher\&.
.RE
.PP
two_phase (boolean)
.RS 4
Specifies whether two\-phase commit is enabled for this subscription\&. The default is
false\&.
.sp
When two\-phase commit is enabled, prepared transactions are sent to the subscriber at the time of
\fBPREPARE TRANSACTION\fR, and are processed as two\-phase transactions on the subscriber too\&. Otherwise, prepared transactions are sent to the subscriber only when committed, and are then processed immediately by the subscriber\&.
.sp
The implementation of two\-phase commit requires that replication has successfully finished the initial table synchronization phase\&. So even when
two_phase
is enabled for a subscription, the internal two\-phase state remains temporarily
\(lqpending\(rq
until the initialization phase completes\&. See column
subtwophasestate
of
pg_subscription
to know the actual two\-phase state\&.
.RE
.PP
disable_on_error (boolean)
.RS 4
Specifies whether the subscription should be automatically disabled if any errors are detected by subscription workers during data replication from the publisher\&. The default is
false\&.
.RE
.PP
password_required (boolean)
.RS 4
If set to
true, connections to the publisher made as a result of this subscription must use password authentication and the password must be specified as a part of the connection string\&. This setting is ignored when the subscription is owned by a superuser\&. The default is
true\&. Only superusers can set this value to
false\&.
.RE
.PP
run_as_owner (boolean)
.RS 4
If true, all replication actions are performed as the subscription owner\&. If false, replication workers will perform actions on each table as the owner of that table\&. The latter configuration is generally much more secure; for details, see
Section\ \&29.10\&. The default is
false\&.
.RE
.PP
origin (string)
.RS 4
Specifies whether the subscription will request the publisher to only send changes that don\*(Aqt have an origin or send changes regardless of origin\&. Setting
origin
to
none
means that the subscription will request the publisher to only send changes that don\*(Aqt have an origin\&. Setting
origin
to
any
means that the publisher sends changes regardless of their origin\&. The default is
any\&.
.sp
See
Notes
for details of how
copy_data = true
can interact with the
origin
parameter\&.
.RE
.PP
failover (boolean)
.RS 4
Specifies whether the replication slots associated with the subscription are enabled to be synced to the standbys so that logical replication can be resumed from the new primary after failover\&. The default is
false\&.
.RE
.RE
.PP
When specifying a parameter of type
boolean, the
=
\fIvalue\fR
part can be omitted, which is equivalent to specifying
TRUE\&.
.SH "NOTES"
.PP
See
Section\ \&29.10
for details on how to configure access control between the subscription and the publication instance\&.
.PP
When creating a replication slot (the default behavior),
\fBCREATE SUBSCRIPTION\fR
cannot be executed inside a transaction block\&.
.PP
Creating a subscription that connects to the same database cluster (for example, to replicate between databases in the same cluster or to replicate within the same database) will only succeed if the replication slot is not created as part of the same command\&. Otherwise, the
\fBCREATE SUBSCRIPTION\fR
call will hang\&. To make this work, create the replication slot separately (using the function
\fBpg_create_logical_replication_slot\fR
with the plugin name
pgoutput) and create the subscription using the parameter
create_slot = false\&. See
Section\ \&29.2.3
for examples\&. This is an implementation restriction that might be lifted in a future release\&.
.PP
If any table in the publication has a
WHERE
clause, rows for which the
\fIexpression\fR
evaluates to false or null will not be published\&. If the subscription has several publications in which the same table has been published with different
WHERE
clauses, a row will be published if any of the expressions (referring to that publish operation) are satisfied\&. In the case of different
WHERE
clauses, if one of the publications has no
WHERE
clause (referring to that publish operation) or the publication is declared as
FOR ALL TABLES
or
FOR TABLES IN SCHEMA, rows are always published regardless of the definition of the other expressions\&. If the subscriber is a
PostgreSQL
version before 15, then any row filtering is ignored during the initial data synchronization phase\&. For this case, the user might want to consider deleting any initially copied data that would be incompatible with subsequent filtering\&. Because initial data synchronization does not take into account the publication
publish
parameter when copying existing table data, some rows may be copied that would not be replicated using DML\&. See
Section\ \&29.2.2
for examples\&.
.PP
Subscriptions having several publications in which the same table has been published with different column lists are not supported\&.
.PP
We allow non\-existent publications to be specified so that users can add those later\&. This means
pg_subscription
can have non\-existent publications\&.
.PP
When using a subscription parameter combination of
copy_data = true
and
origin = NONE, the initial sync table data is copied directly from the publisher, meaning that knowledge of the true origin of that data is not possible\&. If the publisher also has subscriptions then the copied table data might have originated from further upstream\&. This scenario is detected and a WARNING is logged to the user, but the warning is only an indication of a potential problem; it is the user\*(Aqs responsibility to make the necessary checks to ensure the copied data origins are really as wanted or not\&.
.PP
To find which tables might potentially include non\-local origins (due to other subscriptions created on the publisher) try this SQL query:
.sp
.if n \{\
.RS 4
.\}
.nf
# substitute <pub\-names> below with your publication name(s) to be queried
SELECT DISTINCT PT\&.schemaname, PT\&.tablename
FROM pg_publication_tables PT,
     pg_subscription_rel PS
     JOIN pg_class C ON (C\&.oid = PS\&.srrelid)
     JOIN pg_namespace N ON (N\&.oid = C\&.relnamespace)
WHERE N\&.nspname = PT\&.schemaname AND
      C\&.relname = PT\&.tablename AND
      PT\&.pubname IN (<pub\-names>);
.fi
.if n \{\
.RE
.\}
.SH "EXAMPLES"
.PP
Create a subscription to a remote server that replicates tables in the publications
mypublication
and
insert_only
and starts replicating immediately on commit:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE SUBSCRIPTION mysub
         CONNECTION \*(Aqhost=192\&.168\&.1\&.50 port=5432 user=foo dbname=foodb\*(Aq
        PUBLICATION mypublication, insert_only;
.fi
.if n \{\
.RE
.\}
.PP
Create a subscription to a remote server that replicates tables in the
insert_only
publication and does not start replicating until enabled at a later time\&.
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE SUBSCRIPTION mysub
         CONNECTION \*(Aqhost=192\&.168\&.1\&.50 port=5432 user=foo dbname=foodb\*(Aq
        PUBLICATION insert_only
               WITH (enabled = false);
.fi
.if n \{\
.RE
.\}
.SH "COMPATIBILITY"
.PP
\fBCREATE SUBSCRIPTION\fR
is a
PostgreSQL
extension\&.
.SH "SEE ALSO"
ALTER SUBSCRIPTION (\fBALTER_SUBSCRIPTION\fR(7)), DROP SUBSCRIPTION (\fBDROP_SUBSCRIPTION\fR(7)), CREATE PUBLICATION (\fBCREATE_PUBLICATION\fR(7)), ALTER PUBLICATION (\fBALTER_PUBLICATION\fR(7))
