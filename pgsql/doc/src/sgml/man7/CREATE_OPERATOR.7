'\" t
.\"     Title: CREATE OPERATOR
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 2024
.\"    Manual: PostgreSQL 17.0 Documentation
.\"    Source: PostgreSQL 17.0
.\"  Language: English
.\"
.TH "CREATE OPERATOR" "7" "2024" "PostgreSQL 17.0" "PostgreSQL 17.0 Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
CREATE_OPERATOR \- define a new operator
.SH "SYNOPSIS"
.sp
.nf
CREATE OPERATOR \fIname\fR (
    {FUNCTION|PROCEDURE} = \fIfunction_name\fR
    [, LEFTARG = \fIleft_type\fR ] [, RIGHTARG = \fIright_type\fR ]
    [, COMMUTATOR = \fIcom_op\fR ] [, NEGATOR = \fIneg_op\fR ]
    [, RESTRICT = \fIres_proc\fR ] [, JOIN = \fIjoin_proc\fR ]
    [, HASHES ] [, MERGES ]
)
.fi
.SH "DESCRIPTION"
.PP
\fBCREATE OPERATOR\fR
defines a new operator,
\fIname\fR\&. The user who defines an operator becomes its owner\&. If a schema name is given then the operator is created in the specified schema\&. Otherwise it is created in the current schema\&.
.PP
The operator name is a sequence of up to
NAMEDATALEN\-1 (63 by default) characters from the following list:
.sp
.if n \{\
.RS 4
.\}
.nf
+ \- * / < > = ~ ! @ # % ^ & | ` ?
.fi
.if n \{\
.RE
.\}
.sp
There are a few restrictions on your choice of name:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\-\-
and
/*
cannot appear anywhere in an operator name, since they will be taken as the start of a comment\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A multicharacter operator name cannot end in
+
or
\-, unless the name also contains at least one of these characters:
.sp
.if n \{\
.RS 4
.\}
.nf
~ ! @ # % ^ & | ` ?
.fi
.if n \{\
.RE
.\}
.sp
For example,
@\-
is an allowed operator name, but
*\-
is not\&. This restriction allows
PostgreSQL
to parse SQL\-compliant commands without requiring spaces between tokens\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The symbol
=>
is reserved by the SQL grammar, so it cannot be used as an operator name\&.
.RE
.PP
The operator
!=
is mapped to
<>
on input, so these two names are always equivalent\&.
.PP
For binary operators, both
LEFTARG
and
RIGHTARG
must be defined\&. For prefix operators only
RIGHTARG
should be defined\&. The
\fIfunction_name\fR
function must have been previously defined using
\fBCREATE FUNCTION\fR
and must be defined to accept the correct number of arguments (either one or two) of the indicated types\&.
.PP
In the syntax of
CREATE OPERATOR, the keywords
FUNCTION
and
PROCEDURE
are equivalent, but the referenced function must in any case be a function, not a procedure\&. The use of the keyword
PROCEDURE
here is historical and deprecated\&.
.PP
The other clauses specify optional operator optimization attributes\&. Their meaning is detailed in
Section\ \&36.15\&.
.PP
To be able to create an operator, you must have
USAGE
privilege on the argument types and the return type, as well as
EXECUTE
privilege on the underlying function\&. If a commutator or negator operator is specified, you must own those operators\&.
.SH "PARAMETERS"
.PP
\fIname\fR
.RS 4
The name of the operator to be defined\&. See above for allowable characters\&. The name can be schema\-qualified, for example
CREATE OPERATOR myschema\&.+ (\&.\&.\&.)\&. If not, then the operator is created in the current schema\&. Two operators in the same schema can have the same name if they operate on different data types\&. This is called
overloading\&.
.RE
.PP
\fIfunction_name\fR
.RS 4
The function used to implement this operator\&.
.RE
.PP
\fIleft_type\fR
.RS 4
The data type of the operator\*(Aqs left operand, if any\&. This option would be omitted for a prefix operator\&.
.RE
.PP
\fIright_type\fR
.RS 4
The data type of the operator\*(Aqs right operand\&.
.RE
.PP
\fIcom_op\fR
.RS 4
The commutator of this operator\&.
.RE
.PP
\fIneg_op\fR
.RS 4
The negator of this operator\&.
.RE
.PP
\fIres_proc\fR
.RS 4
The restriction selectivity estimator function for this operator\&.
.RE
.PP
\fIjoin_proc\fR
.RS 4
The join selectivity estimator function for this operator\&.
.RE
.PP
HASHES
.RS 4
Indicates this operator can support a hash join\&.
.RE
.PP
MERGES
.RS 4
Indicates this operator can support a merge join\&.
.RE
.PP
To give a schema\-qualified operator name in
\fIcom_op\fR
or the other optional arguments, use the
OPERATOR()
syntax, for example:
.sp
.if n \{\
.RS 4
.\}
.nf
COMMUTATOR = OPERATOR(myschema\&.===) ,
.fi
.if n \{\
.RE
.\}
.SH "NOTES"
.PP
Refer to
Section\ \&36.14
and
Section\ \&36.15
for further information\&.
.PP
When you are defining a self\-commutative operator, you just do it\&. When you are defining a pair of commutative operators, things are a little trickier: how can the first one to be defined refer to the other one, which you haven\*(Aqt defined yet? There are three solutions to this problem:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
One way is to omit the
COMMUTATOR
clause in the first operator that you define, and then provide one in the second operator\*(Aqs definition\&. Since
PostgreSQL
knows that commutative operators come in pairs, when it sees the second definition it will automatically go back and fill in the missing
COMMUTATOR
clause in the first definition\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Another, more straightforward way is just to include
COMMUTATOR
clauses in both definitions\&. When
PostgreSQL
processes the first definition and realizes that
COMMUTATOR
refers to a nonexistent operator, the system will make a dummy entry for that operator in the system catalog\&. This dummy entry will have valid data only for the operator name, left and right operand types, and owner, since that\*(Aqs all that
PostgreSQL
can deduce at this point\&. The first operator\*(Aqs catalog entry will link to this dummy entry\&. Later, when you define the second operator, the system updates the dummy entry with the additional information from the second definition\&. If you try to use the dummy operator before it\*(Aqs been filled in, you\*(Aqll just get an error message\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Alternatively, both operators can be defined without
COMMUTATOR
clauses and then
\fBALTER OPERATOR\fR
can be used to set their commutator links\&. It\*(Aqs sufficient to
\fBALTER\fR
either one of the pair\&.
.RE
.sp
In all three cases, you must own both operators in order to mark them as commutators\&.
.PP
Pairs of negator operators can be defined using the same methods as for commutator pairs\&.
.PP
It is not possible to specify an operator\*(Aqs lexical precedence in
\fBCREATE OPERATOR\fR, because the parser\*(Aqs precedence behavior is hard\-wired\&. See
Section\ \&4.1.6
for precedence details\&.
.PP
The obsolete options
SORT1,
SORT2,
LTCMP, and
GTCMP
were formerly used to specify the names of sort operators associated with a merge\-joinable operator\&. This is no longer necessary, since information about associated operators is found by looking at B\-tree operator families instead\&. If one of these options is given, it is ignored except for implicitly setting
MERGES
true\&.
.PP
Use
\fBDROP OPERATOR\fR
to delete user\-defined operators from a database\&. Use
\fBALTER OPERATOR\fR
to modify operators in a database\&.
.SH "EXAMPLES"
.PP
The following command defines a new operator, area\-equality, for the data type
box:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE OPERATOR === (
    LEFTARG = box,
    RIGHTARG = box,
    FUNCTION = area_equal_function,
    COMMUTATOR = ===,
    NEGATOR = !==,
    RESTRICT = area_restriction_function,
    JOIN = area_join_function,
    HASHES, MERGES
);
.fi
.if n \{\
.RE
.\}
.SH "COMPATIBILITY"
.PP
\fBCREATE OPERATOR\fR
is a
PostgreSQL
extension\&. There are no provisions for user\-defined operators in the SQL standard\&.
.SH "SEE ALSO"
ALTER OPERATOR (\fBALTER_OPERATOR\fR(7)), CREATE OPERATOR CLASS (\fBCREATE_OPERATOR_CLASS\fR(7)), DROP OPERATOR (\fBDROP_OPERATOR\fR(7))
